mpg
mtcars$mpg
mtcars$cyl
mtcars$disp
ggplot(mtcars, aes(disp, mpg, color = cyl)) + geom_line()
library(ggplot2)
library(tidyverse)
build()
devtools::build()
Sys.Date()
2020-05-16" - Sys.Date
"2020-05-16" - Sys.Date
"2020-05-16" - Sys.Date()
as.Date("2020-05-16") - Sys.Date()
as.Date("2020-01-30") - Sys.Date()
library(ggplot2)
gapminder
gapminder
data(gapminder)
ggplot2::diamonds
ggplot(diamonds, aes(price, cut)) + geom_bar()
ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "identity")
p =  ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "identity")
p =  ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "identity")
ggpretay(p)
ggpretay <- function(plot, title = "Enter Title",
subtitle = " Enter Subtitle",
xaxis = " enter x",
yaxis = " enter y") {
plot +
ggnewlabs(title = title, subtitle = subtitle) +
ggplot2::xlab(xaxis = paste(xaxis)) +
ggplot2::ylab(yaxis = paste(yaxis)) + ggpretty()
}
xlabs <- function(xaxis) {ggplot2::xlab(paste(xaxis))}
ylabs <- function(yaxis) {ggplot2::ylab(paste(yaxis))}
ggnewlabs <- function(title = "Enter Title",
subtitle = " Enter Subtitle") {
ggplot2::labs(title = paste(title),
subtitle = paste(subtitle))
}
ggpretty <- function(font = "Muli") {
font <- font
ggplot2::theme(
#Text format:
#This sets the font, size, type and colour of text for the chart's title
plot.title = ggplot2::element_text(family=font,
size=16,
face="bold",
color="#377460",
margin=ggplot2::margin(0,0,0,0),
hjust = 0),
plot.title.position = "plot",
#This sets the font, size, type and colour of text for the chart's subtitle, as well as setting a margin between the title and the subtitle
plot.subtitle = ggplot2::element_text(family=font,
size=14,
margin=ggplot2::margin(9,0,0,0)),
plot.caption = ggplot2::element_blank(),
#This leaves the caption text element empty, because it is set elsewhere in the finalise plot function
#Legend format
#This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates.
legend.position = "top",
legend.text.align = 0,
legend.background = ggplot2::element_blank(),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
legend.text = ggplot2::element_text(family=font,
size=12,
color="#222222"),
#Axis format
#This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks. In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so.
axis.title = ggplot2::element_text(size = 12),
axis.text = ggplot2::element_text(family=font,
size=12,
color="#222222"),
axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10), size = 12),
axis.ticks = ggplot2::element_blank(),
axis.line = ggplot2::element_blank(),
#Grid lines
#This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so
panel.grid.minor = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_line(color="#cbcbcb"),
panel.grid.major.x = ggplot2::element_blank(),
#Blank background
#This sets the panel background as blank, removing the standard grey ggplot background colour from the plot
panel.background = ggplot2::element_blank(),
#Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 20)
strip.background = ggplot2::element_rect(fill="white"),
strip.text = ggplot2::element_text(size  = 14,  hjust = 0)
)
}
p =  ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "identity")
```{r}
p =  ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "identity")
ggpretay(p)
ggpretay <- function(plot, title = "Enter Title",
subtitle = " Enter Subtitle",
xaxis = " enter x",
yaxis = " enter y") {
plot +
ggnewlabs(title = title, subtitle = subtitle) +
ggplot2::xlab(xaxis = xaxis) +
ggplot2::ylab(yaxis = yaxis) + ggpretty()
}
```{r}
p =  ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "identity")
ggpretay(p)
```{r}
p =  ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "identity")
ggpretay(p)
ggpretay <- function(plot, title = "Enter Title",
subtitle = " Enter Subtitle",
xaxis = " enter x",
yaxis = " enter y") {
plot +
ggnewlabs(title = title, subtitle = subtitle) +
ggplot2::xlab(xaxis) +
ggplot2::ylab(yaxis) + ggpretty()
}
```{r}
p =  ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "identity")
ggpretay(p)
library(ggplot2)
ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "identity")
p =  ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "identity")
ggpretay(p)
diamonds
ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary", fun.y = "mean")
ggpretay(p)
```{r eval=TRUE, echo=T}
p = ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary", fun.y = "mean")
p = ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary", fun.y = "mean")
p
p = ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary", fun.x = "mean")
p
ggpretay(p)
ggpretay <- function(plot, title = "Enter a provocative title",
subtitle = "Enter Subtitle which explains the graphs",
xaxis = " enter x",
yaxis = " enter y") {
plot +
ggnewlabs(title = title, subtitle = subtitle) +
ggplot2::xlab(xaxis) +
ggplot2::ylab(yaxis) + ggpretty()
}
ggpretay(p)
p <- p + scale_color_dectech
#' Color scale constructor for dectech colors
#'
#' @param palette Character name of palette in dectech_palettes
#' @param discrete Boolean indicating whether color aesthetic is discrete or not
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments passed to discrete_scale() or
#'            scale_color_gradientn(), used respectively when discrete is TRUE or FALSE
#'
scale_color_dectech <- function(palette = "mixed", discrete = TRUE, reverse = FALSE, ...) {
pal <- dectech_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("dectech_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
#Color Plot
# Dectech corporate colors
dectech_colors <- c(
`cool grey`        = "#545F66",
`dectech green`    = "#377460",
`light grey`      = "#DCDCDD",
`dectech navy`     = "#003D59",
`purple`           = "#52489C",
`light green`      = "#78C091",
`yellow`           = "#F4E04D")
#' Function to extract dectech colors as hex codes
#'
#' @param ... Character names of dectech_colors
#'
dectech_cols <- function(...) {
cols <- c(...)
if (is.null(cols))
return (dectech_colors)
dectech_colors[cols]
}
library(ggplot2)
#Develop a pallete for future use
dectech_palettes <- list(
`main`  = dectech_cols("cool grey", "dectech green", "cool grey"),
`mixed` = dectech_cols("dectech navy", "purple",  "yellow", "dectech green"),
`grey`  = dectech_cols("light grey", "cool grey")
)
#' Return function to interpolate a dectech color palette
#'
#' @param palette Character name of palette in dectech_palettes
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments to pass to colorRampPalette()
#'
dectech_pal <- function(palette = "main", reverse = FALSE, ...) {
pal <- dectech_palettes[[palette]]
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
#' Color scale constructor for dectech colors
#'
#' @param palette Character name of palette in dectech_palettes
#' @param discrete Boolean indicating whether color aesthetic is discrete or not
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments passed to discrete_scale() or
#'            scale_color_gradientn(), used respectively when discrete is TRUE or FALSE
#'
scale_color_dectech <- function(palette = "mixed", discrete = TRUE, reverse = FALSE, ...) {
pal <- dectech_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("dectech_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
#' Fill scale constructor for dectech colors
#'
#' @param palette Character name of palette in dectech_palettes
#' @param discrete Boolean indicating whether color aesthetic is discrete or not
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments passed to discrete_scale() or
#'            scale_fill_gradientn(), used respectively when discrete is TRUE or FALSE
#'
scale_fill_dectech <- function(palette = "mixed", discrete = TRUE, reverse = FALSE, ...) {
pal <- dectech_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("fill", paste0("dectech_", palette), palette = pal, ...)
} else {
scale_fill_gradientn(colours = pal(256), ...)
}
}
p <- p + scale_color_dectech
p <- p + scale_color_dectech()
p
p + scale_color_dectech()
p <- p + scale_fill_dectech()
p
p <- p + scale_fill_dectech(discrete = False)
p
p <- p + scale_fill_dectech(discrete = False)
p <- p + scale_fill_dectech(discrete = F)
p
scale_fill_dectech
p <- ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary", fun.x = "mean" )
p
p <- ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary", fun.x = "mean" ,fill = scale_color_dectech())
p <- ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary" ,fill = scale_color_dectech())
p
p <- ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary" ,fill = dectech_colors())
dectech_colors()
p <- ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary" ,fill = dectech_colors("dectech green"))
# Dectech corporate colors
dectech_colors <- c(
`cool grey`        = "#545F66",
`dectech green`    = "#377460",
`light grey`      = "#DCDCDD",
`dectech navy`     = "#003D59",
`purple`           = "#52489C",
`light green`      = "#78C091",
`yellow`           = "#F4E04D")
p <- ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary" ,fill = dectech_colors("dectech green"))
dectech_colors
dectech_colors("dectech green")
dectech_colors("dectech green")
dectech_pal("dectech green")
p <- ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary" ,fill = dectech_pal("dectech green"))
dectech_cols("dectech green")
p <- ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary" ,fill = dectech_cols("dectech green"))
p
```{r eval=TRUE, echo=T}
p <- ggpretay(p)
p
```{r eval=T, echo=F}
grid.arrange(p1, p2, ncol = 2)
library(grid)
grid.arrange(p1, p2, ncol = 2)
library(gridextra)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
p1 <- ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary", fun.x = "mean" )
p1
library(ggplot2)
p1 <- ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary", fun.x = "mean" )
p1
```{r eval=TRUE, echo=T}
p2 <- ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary" ,fill = dectech_cols("dectech green"))
p2
```{r eval=TRUE, echo=T}
p2 <- ggpretay(p)
p
p2 <- ggpretay(p)
p
```{r eval=T, echo=F}
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
```{r eval=F, echo=T}
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
require(sysfonts)
install.packages("remotes")
remotes::install_github("rishkum/dectechViz")
library(dectechViz)
p2 <- ggplot(diamonds, aes(price, cut)) + geom_bar(stat = "summary" ,fill = dectech_cols("dectech green"))
